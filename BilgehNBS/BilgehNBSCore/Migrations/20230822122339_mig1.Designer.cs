// <auto-generated />
using System;
using BilgehNBSCore.Domain.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BilgehNBSCore.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230822122339_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.Crossing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CarNumber")
                        .HasColumnType("text");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CrossingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("InputOrOutput")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDriver")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<bool?>("Permanent")
                        .HasColumnType("boolean");

                    b.Property<int?>("PersonWithTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PersonWithTypeId");

                    b.ToTable("Crossings");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChildCount")
                        .HasColumnType("integer");

                    b.Property<int?>("IdCardInformationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAttended")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGuestInviter")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReception")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("PersonWithTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCardInformationId");

                    b.HasIndex("PersonWithTypeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdCardInformationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsReception")
                        .HasColumnType("boolean");

                    b.Property<int?>("PersonWithTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Relativetype")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IdCardInformationId");

                    b.HasIndex("PersonWithTypeId");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("EventParticipants")
                        .HasColumnType("boolean");

                    b.Property<int?>("IdCardInformationId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonWithTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IdCardInformationId");

                    b.HasIndex("PersonWithTypeId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.IdCardInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActivationDate")
                        .HasColumnType("text");

                    b.Property<string>("BirthAddress")
                        .HasColumnType("text");

                    b.Property<string>("BirthDate")
                        .HasColumnType("text");

                    b.Property<string>("BloodType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeActivationReason")
                        .HasColumnType("text");

                    b.Property<string>("ExpireDate")
                        .HasColumnType("text");

                    b.Property<string>("EyeColor")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("GivenDate")
                        .HasColumnType("text");

                    b.Property<string>("GivenOrganizatoin")
                        .HasColumnType("text");

                    b.Property<string>("Height")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Pin")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationAddress")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IdCardInformations");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PersonTypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonTypes");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.PersonWithType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PerssonTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PersonWithTypes");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.RelativeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("RelativeTypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RelativeTypes");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("IdCardInformationId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonWithTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkerParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCardInformationId");

                    b.HasIndex("PersonWithTypeId");

                    b.HasIndex("WorkerParentId");

                    b.ToTable("Worker");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.WorkerParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkerParent");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.Crossing", b =>
                {
                    b.HasOne("BilgehNBSCore.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("BilgehNBSCore.Domain.Entities.PersonWithType", "PersonWithType")
                        .WithMany("Crossing")
                        .HasForeignKey("PersonWithTypeId");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.Employee", b =>
                {
                    b.HasOne("BilgehNBSCore.Domain.Entities.IdCardInformation", "IdCardInformation")
                        .WithMany()
                        .HasForeignKey("IdCardInformationId");

                    b.HasOne("BilgehNBSCore.Domain.Entities.PersonWithType", "PersonWithType")
                        .WithMany()
                        .HasForeignKey("PersonWithTypeId");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.Family", b =>
                {
                    b.HasOne("BilgehNBSCore.Domain.Entities.Employee", "Employee")
                        .WithMany("FamilyList")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("BilgehNBSCore.Domain.Entities.IdCardInformation", "IdCardInformation")
                        .WithMany()
                        .HasForeignKey("IdCardInformationId");

                    b.HasOne("BilgehNBSCore.Domain.Entities.PersonWithType", "PersonWithType")
                        .WithMany()
                        .HasForeignKey("PersonWithTypeId");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.Guest", b =>
                {
                    b.HasOne("BilgehNBSCore.Domain.Entities.Employee", "Employee")
                        .WithMany("GuestList")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("BilgehNBSCore.Domain.Entities.IdCardInformation", "IdCardInformation")
                        .WithMany()
                        .HasForeignKey("IdCardInformationId");

                    b.HasOne("BilgehNBSCore.Domain.Entities.PersonWithType", "PersonWithType")
                        .WithMany()
                        .HasForeignKey("PersonWithTypeId");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.User", b =>
                {
                    b.HasOne("BilgehNBSCore.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("BilgehNBSCore.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("BilgehNBSCore.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("BilgehNBSCore.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BilgehNBSCore.Domain.Entities.Worker", b =>
                {
                    b.HasOne("BilgehNBSCore.Domain.Entities.IdCardInformation", "IdCardInformation")
                        .WithMany()
                        .HasForeignKey("IdCardInformationId");

                    b.HasOne("BilgehNBSCore.Domain.Entities.PersonWithType", "PersonWithType")
                        .WithMany()
                        .HasForeignKey("PersonWithTypeId");

                    b.HasOne("BilgehNBSCore.Domain.Entities.WorkerParent", "WorkerParent")
                        .WithMany("WorkerList")
                        .HasForeignKey("WorkerParentId");
                });
#pragma warning restore 612, 618
        }
    }
}
